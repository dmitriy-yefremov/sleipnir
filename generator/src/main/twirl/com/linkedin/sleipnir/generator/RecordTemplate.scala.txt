@(generator: com.linkedin.sleipnir.generator.types.RecordTypeGenerator)

@import _root_.scala.collection.JavaConverters._
@import _root_.com.linkedin.data.schema.RecordDataSchema.Field
@import _root_.com.linkedin.data.schema.DataSchema
@import _root_.com.linkedin.data.schema.PrimitiveDataSchema
@import _root_.com.linkedin.data.schema.RecordDataSchema
@import _root_.com.linkedin.data.schema.UnionDataSchema
@import _root_.com.linkedin.data.schema.FixedDataSchema
@import _root_.com.linkedin.data.schema.EnumDataSchema
@import _root_.com.linkedin.data.schema.ArrayDataSchema
@import _root_.com.linkedin.data.schema.MapDataSchema
@import _root_.com.linkedin.data.schema.TyperefDataSchema
@import _root_.com.linkedin.sleipnir.generator.types.TypeGenerator
@import _root_.com.linkedin.sleipnir.generator.types.TypeGeneratorFactory

package @(generator.name.packageName)

import scala.collection.JavaConverters._

import com.linkedin.data.DataMap
import com.linkedin.data.template.SetMode
import com.linkedin.data.schema.RecordDataSchema
import com.linkedin.data.template.DataTemplateUtil
import com.linkedin.sleipnir.data.ScalaRecordTemplate


import @(generator.name.shortClassName)._

/**
 * @(generator.schema.getDoc)
 */
class @(generator.name.shortClassName)(data: DataMap) extends ScalaRecordTemplate(data, Schema) {

  def this(@(generator.constructorArgs)) = {
    this(new DataMap())
    @for(field <- generator.schema.getFields.asScala) {
      set@(field.getName.capitalize)(@(generator.escapedFieldName(field)))
    }
  }

@for(field <- generator.schema.getFields.asScala) {

  /**
   * @(field.getDoc)
   */
  def @(generator.escapedFieldName(field)): @(generator.recordTypeOf(field)) = {
    @getter(field)
  }

  private def set@(field.getName.capitalize)(@(generator.constructorArg(field))): Unit = {
    @setter(field)
  }

}

}

object @(generator.name.shortClassName) {

  private val SchemaJson: String = "@(generator.schemaJson)"

  private val Schema: RecordDataSchema = DataTemplateUtil.parseSchema(SchemaJson).asInstanceOf[RecordDataSchema]

@for(field <- generator.schema.getFields.asScala) {
  private val @(generator.fieldValName(field)) = Schema.getField("@(field.getName)")
}

  def apply(@(generator.constructorArgs)) = new @(generator.name.shortClassName)(@generator.constructorParams)

}

@***********
 * Setters *
 ***********@

@setter(field: Field) = {
  @if(field.getOptional) {
    @(generator.escapedFieldName(field)).foreach { @(field.getName)Value =>
      @setterWithType(generator.fieldValName(field), field.getName +"Value", generator.fieldGenerator(field))
    }
  } else {
    @setterWithType(generator.fieldValName(field), generator.escapedFieldName(field), generator.fieldGenerator(field))
  }
}

@setterWithType(fieldName: String, valueName: String, fieldGenerator: TypeGenerator) = {
  @(fieldGenerator.schema) match {

    case _ :  TyperefDataSchema => {
      putCustomType(@(fieldName), classOf[@(fieldGenerator.name.externalClassName)], classOf[@(fieldGenerator.referencedGenerators.head.name.externalClassName)], @(valueName), SetMode.IGNORE_NULL)
    }

    case _ : PrimitiveDataSchema => {
      putDirect[@(fieldGenerator.name.fullClassName)](@(fieldName), classOf[@(fieldGenerator.name.fullClassName)], @(valueName))
    }

    case _ : RecordDataSchema | _ : FixedDataSchema | _ : UnionDataSchema => {
      putWrapped(@(fieldName), classOf[@(fieldGenerator.name.externalClassName)], @(valueName))
    }

    case _ : EnumDataSchema => {
      putDirect(@(fieldName), classOf[String], @(valueName).toString)
    }

    case _ : ArrayDataSchema | _ : MapDataSchema => {
      putWrapped(@(fieldName), classOf[@(fieldGenerator.name.fullClassName)], @(fieldGenerator.name.fullClassName)(@(valueName)))
    }

    case _ => {
      set(@(fieldName), @(valueName))
    }

  }

}

@***********
 * Getters *
 ***********@

@getter(field: Field) = {
  @if(field.getOptional) {
    @getterWithType(field, generator.fieldGenerator(field))
  } else {
    getRequired(@generator.fieldValName(field), @getterWithType(field, generator.fieldGenerator(field)))
  }
}

@getterWithType(field: Field, fieldGenerator: TypeGenerator) = {
  @(fieldGenerator.schema) match {

    case _ : TyperefDataSchema => {
      getCustom(@(generator.fieldValName(field)), classOf[@(fieldGenerator.name.externalClassName)])
    }

    case _ : PrimitiveDataSchema => {
      getDirect(@(generator.fieldValName(field)), classOf[@(fieldGenerator.name.externalClassName)])
    }

    case _ : RecordDataSchema | _ : FixedDataSchema | _ : UnionDataSchema => {
      getWrapped(@(generator.fieldValName(field)), classOf[@(fieldGenerator.name.externalClassName)])
    }

    case _ : EnumDataSchema => {
      {
        val name = getDirect(@(generator.fieldValName(field)), classOf[String])
        name.map(@(fieldGenerator.name.fullClassName).withNameOrUnknown(_))
      }
    }

    case _ : ArrayDataSchema => {
      getWrapped(@(generator.fieldValName(field)), classOf[@(fieldGenerator.name.fullClassName)]).map(_.items)
    }

    case _ : MapDataSchema => {
      getWrapped(@(generator.fieldValName(field)), classOf[@(fieldGenerator.name.fullClassName)]).map(_.map)
    }

    case _ => {
      get[@(fieldGenerator.name.externalClassName)](@(generator.fieldValName(field)))
    }

  }
}
