@(generator: com.linkedin.sleipnir.generator.types.ComplexArrayTypeGenerator)

@import _root_.scala.collection.JavaConverters._
@import _root_.com.linkedin.data.schema.RecordDataSchema.Field
@import _root_.com.linkedin.data.schema.EnumDataSchema

package @(generator.name.packageName)

import com.linkedin.data.DataMap
import com.linkedin.data.DataList
import com.linkedin.data.schema.ArrayDataSchema
import com.linkedin.data.template.DataTemplateUtil
import com.linkedin.sleipnir.data.ScalaArrayTemplate

import @(generator.name.shortClassName)._

class @(generator.name.shortClassName) protected(val items: Seq[@(generator.itemsClassName)], itemsData: DataList) extends ScalaArrayTemplate(itemsData, Schema) {

  def this(items: Seq[@(generator.itemsClassName)]) = this(items, ScalaArrayTemplate.unwrapAll(items, InputCoercer))

  def this(data: DataList) = this(ScalaArrayTemplate.wrapAll(data, OutputCoercer), data)

}

object @(generator.name.shortClassName) {

  private val SchemaJson: String = "@(generator.schemaJson)"

  private val Schema: ArrayDataSchema = DataTemplateUtil.parseSchema(SchemaJson).asInstanceOf[ArrayDataSchema]

  private val OutputCoercer: PartialFunction[Any, @(generator.itemsClassName)] = {
    @(generator.itemsGenerator.schema.getDereferencedDataSchema) match {
      case _: EnumDataSchema => {
        case enum: String => @(generator.itemsGenerator.name.fullClassName).withNameOrUnknown(enum)
      }

      case _ => {
        case data: DataMap => new @(generator.itemsClassName)(data)
      }

    }

  }

  private val InputCoercer: PartialFunction[@(generator.itemsClassName), AnyRef] = {
    @(generator.itemsGenerator.schema.getDereferencedDataSchema) match {
      case _: EnumDataSchema => {
        case enum: @(generator.itemsClassName) => enum.toString
      }

      case _ => {
        case dataTemplate: @(generator.itemsClassName) => dataTemplate.data()
      }

    }

  }

  def apply(items: Seq[@(generator.itemsClassName)]) = new @(generator.name.shortClassName)(items)

}
