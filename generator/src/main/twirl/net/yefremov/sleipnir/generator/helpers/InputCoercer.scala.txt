@*
 *    Copyright 2015 Dmitriy Yefremov
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *@


@(generator: net.yefremov.sleipnir.generator.types.TypeGenerator)

@import _root_.com.linkedin.data.schema.EnumDataSchema
@import _root_.com.linkedin.data.schema.ArrayDataSchema
@import _root_.com.linkedin.data.schema.MapDataSchema
@import _root_.com.linkedin.data.schema.RecordDataSchema
@import _root_.com.linkedin.data.schema.UnionDataSchema
@import _root_.com.linkedin.data.schema.FixedDataSchema
@import _root_.com.linkedin.data.schema.TyperefDataSchema

{
  @(generator.schema) match {

    case _: TyperefDataSchema => {
      case customClass: @(generator.name.fullClassName) => DataTemplateUtil.coerceInput(customClass, classOf[@(generator.name.fullClassName)], classOf[@(generator.referencedGenerators.head.name.fullClassName)])
    }

    case _: EnumDataSchema => {
      case enum: @(generator.name.externalClassName) => enum.toString
    }

    case _: ArrayDataSchema => {
      case array: scala.Seq[_] => new @(generator.name.fullClassName)(array).data
    }

    case _: MapDataSchema => {
      case map: scala.Predef.Map[_, _] => new @(generator.name.fullClassName)(map).data
    }

    case _ : RecordDataSchema | _ : FixedDataSchema | _ : UnionDataSchema => {
      case dataTemplate: @(generator.name.fullClassName) => dataTemplate.data
    }

  }

}