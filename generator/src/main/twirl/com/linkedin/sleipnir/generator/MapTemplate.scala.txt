@(generator: com.linkedin.sleipnir.generator.types.ComplexMapTypeGenerator)

@import _root_.scala.collection.JavaConverters._
@import _root_.com.linkedin.data.schema.RecordDataSchema.Field

package @(generator.name.packageName)

import com.linkedin.data.DataMap
import com.linkedin.data.schema.MapDataSchema
import com.linkedin.data.template.DataTemplateUtil
import com.linkedin.sleipnir.data.ScalaMapTemplate

import @(generator.name.shortClassName)._

class @(generator.name.shortClassName)(val map: Map[String,@(generator.valuesClassName)], mapData: DataMap) extends ScalaMapTemplate(mapData, Schema) {

  def this(map: Map[String,@(generator.valuesClassName)]) = this(map, ScalaMapTemplate.unwrapAll(map))

  def this(data: DataMap) = this(ScalaMapTemplate.wrapAll(data, data => new @(generator.valuesClassName)(data)), data)

}

object @(generator.name.shortClassName) {

  private val SchemaJson = "@(generator.schemaJson)"

  private val Schema = DataTemplateUtil.parseSchema(SchemaJson).asInstanceOf[MapDataSchema]

  def apply(map: Map[String,@(generator.valuesClassName)]) = new @(generator.name.shortClassName)(map)

}
