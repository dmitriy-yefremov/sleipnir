@*
 *    Copyright 2015 Dmitriy Yefremov
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *@


@(generator: net.yefremov.sleipnir.generator.types.ComplexArrayTypeGenerator)
@import _root_.net.yefremov.sleipnir.generator.helpers.txt.OutputCoercer
@import _root_.net.yefremov.sleipnir.generator.helpers.txt.InputCoercer
@import _root_.net.yefremov.sleipnir.generator.helpers.txt.CustomInitializers
@import _root_.scala.collection.JavaConverters._
@import _root_.com.linkedin.data.schema.RecordDataSchema.Field
@import _root_.com.linkedin.data.schema.EnumDataSchema
@import java.util.Calendar
package @(generator.name.packageName)


import com.linkedin.data.DataList
import com.linkedin.data.schema.ArrayDataSchema
import com.linkedin.data.template.{Custom,DataTemplateUtil}

import net.yefremov.sleipnir.data.ScalaArrayTemplate

import javax.annotation.Generated

import @(generator.name.shortClassName)._


@@Generated(value = scala.Array("@(generator.typeGeneratorName)"), comments="LinkedIn Data Template. Generated from @(generator.filename)", date = "@(Calendar.getInstance().getTime())")
class @(generator.name.shortClassName) protected(val items: scala.Seq[@(generator.itemsClassName)], itemsData: DataList) extends ScalaArrayTemplate(itemsData, Schema) {

  def this(items: scala.Seq[@(generator.itemsClassName)]) = this(items, ScalaArrayTemplate.unwrapAll(items, InputCoercer))

  def this(data: DataList) = this(ScalaArrayTemplate.wrapAll(data, OutputCoercer), data)

}

object @(generator.name.shortClassName) {

  @CustomInitializers(generator.itemsGenerator)

  private val SchemaJson: String = "@(generator.schemaJson)"

  private val Schema: ArrayDataSchema = DataTemplateUtil.parseSchema(SchemaJson).asInstanceOf[ArrayDataSchema]

  private val OutputCoercer: PartialFunction[Any, @(generator.itemsClassName)] = @OutputCoercer(generator.itemsGenerator)

  private val InputCoercer: PartialFunction[@(generator.itemsClassName), AnyRef] = @InputCoercer(generator.itemsGenerator)

  def apply(items: scala.Seq[@(generator.itemsClassName)]) = new @(generator.name.shortClassName)(items)

}
