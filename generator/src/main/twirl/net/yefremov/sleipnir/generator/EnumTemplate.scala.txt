@*
 *    Copyright 2015 Dmitriy Yefremov
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *@


@(generator: net.yefremov.sleipnir.generator.types.EnumTypeGenerator)
@import _root_.scala.collection.JavaConverters._
@import java.util.Calendar
package @(generator.name.packageName)


import com.linkedin.data.schema.EnumDataSchema
import com.linkedin.data.template.DataTemplateUtil

import net.yefremov.sleipnir.data.ScalaEnumTemplate

import javax.annotation.Generated


/**
 * @(generator.schema.getDoc)
 */
@@Generated(value = scala.Array("@(generator.typeGeneratorName)"), comments="LinkedIn Data Template. Generated from @(generator.filename)", date = "@(Calendar.getInstance().getTime())")
object @(generator.name.shortClassName) extends ScalaEnumTemplate {

  private val SchemaJson: String = "@(generator.schemaJson)"

  private val Schema: EnumDataSchema = DataTemplateUtil.parseSchema(SchemaJson).asInstanceOf[EnumDataSchema]

  type @(generator.name.shortClassName) = Type

  type Type = CustomVal

  class CustomVal extends Val

  val $Unknown: Type = new Type

  @if(!generator.schema.getSymbols.isEmpty) {
    val @(generator.symbols): Type = new Type
  }

}